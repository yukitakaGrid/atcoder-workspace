#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;

long long BFS(long long firstNode,vector<vector<long long>> graphList,long long N,long long goal){
    vector<long long> currentSearchList;
    vector<long long> nextSearchList;
    vector<long long> checked(N,0);
    currentSearchList.push_back(firstNode);
    long long depth = 1;
    while(1){
        //現在の探索している頂点が繋がっている頂点を探す
        bool find = false;
        for(int i=0;i<currentSearchList.size();i++){
            for(int j=0;j<N;j++){
                if(graphList[currentSearchList[i]][j]==1 && checked[j]==0){
                    if(goal==j){
                        //cout << "goal:" << goal << "depth:" << depth << endl;  
                        return depth;
                    }
                    nextSearchList.push_back(j);
                    find = true;
                }
            }
        }

        if(find==false){
            cout << "目的のノードが見つかりませんでした" << endl;
            return -1;
        }

        currentSearchList.clear();
        currentSearchList = nextSearchList;
        nextSearchList.clear();

        depth++;
    }
}   

vector<long long> solve(long long N, std::vector<long long> x, std::vector<long long> y, long long Q, std::vector<long long> a, std::vector<long long> b){
    vector<vector<long long>> graphList(N,vector<long long>(N+1,0));
    vector<long long> ans(N-1,0);
    for(int i=0;i<N-1;i++){
        graphList[x[i]][y[i]] = 1;
        graphList[y[i]][x[i]] = 1;
    }

    /*for(int i=0;i<N;i++){
        for(int j=0;j<N;j++){
            cout << graphList[i][j] << " ";
        }
        cout << endl;
    }*/

    for(int i=0;i<Q;i++){
        //各頂点に対する一番直径の長いところを調べる
        ans[i] = BFS(a[i],graphList,N,b[i])+1;
    }

    return ans;
}

// Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    std::scanf("%lld", &N);
    std::vector<long long> x(N-1);
    std::vector<long long> y(N-1);
    for(int i = 0 ; i < N-1 ; i++){
        std::scanf("%lld", &x[i]);
        std::scanf("%lld", &y[i]);
        x[i]--; y[i]--;
    }
    long long Q;
    std::scanf("%lld", &Q);
    std::vector<long long> a(Q);
    std::vector<long long> b(Q);
    for(int i = 0 ; i < Q ; i++){
        std::scanf("%lld", &a[i]);
        std::scanf("%lld", &b[i]);
        a[i]--; b[i]--;
    }
    vector<long long> ans(N-1,0);
    ans = solve(N, std::move(x), std::move(y), Q, std::move(a), std::move(b));
    for(int i=0;i<Q;i++){
        cout << ans[i] << endl;
    }
    return 0;
}
